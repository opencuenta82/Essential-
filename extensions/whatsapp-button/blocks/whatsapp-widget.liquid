{% comment %} Leer configuraci√≥n COMPLETA desde metafields {% endcomment %}
{% assign phone_number = shop.metafields.whatsapp_widget.phone_number.value %}
{% assign message = shop.metafields.whatsapp_widget.message.value %}
{% assign button_color = shop.metafields.whatsapp_widget.button_color.value %}
{% assign position = shop.metafields.whatsapp_widget.position.value %}
{% assign icon = shop.metafields.whatsapp_widget.icon.value %}

{% comment %} Nuevos campos del formulario {% endcomment %}
{% assign button_style = shop.metafields.whatsapp_widget.button_style.value %}
{% assign logo_url = shop.metafields.whatsapp_widget.logo_url.value %}
{% assign active_hours = shop.metafields.whatsapp_widget.active_hours.value %}
{% assign start_time = shop.metafields.whatsapp_widget.start_time.value %}
{% assign end_time = shop.metafields.whatsapp_widget.end_time.value %}
{% assign is_active_24_hours = shop.metafields.whatsapp_widget.is_active_24_hours.value %}
{% assign active_days = shop.metafields.whatsapp_widget.active_days.value %}

{% comment %} Verificar horarios de atenci√≥n con soporte para zonas horarias {% endcomment %}
<script>
function isWidgetActiveNow() {
  // Si est√° configurado para 24 horas, siempre activo
  {% if is_active_24_hours == 'true' %}
    return true;
  {% endif %}

  // Obtener zona horaria del navegador del cliente
  const clientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  const now = new Date();
  
  // Formatear hora actual (HH:MM) en zona horaria del cliente
  const clientTime = now.toLocaleTimeString('en-US', { 
    hour12: false, 
    hour: '2-digit', 
    minute: '2-digit',
    timeZone: clientTimeZone 
  }).replace(':', '');

  // Convertir a n√∫mero (ej: "09:00" ‚Üí 900)
  const currentTime = parseInt(clientTime);
  const startTime = parseInt('{{ start_time }}'.replace(':', ''));
  const endTime = parseInt('{{ end_time }}'.replace(':', ''));

  // Verificar d√≠as activos (usando zona horaria del cliente)
  const clientDay = now.toLocaleDateString('en-US', { 
    weekday: 'long', 
    timeZone: clientTimeZone 
  }).toLowerCase();

  const activeDays = '{{ active_days }}'.toLowerCase().split(',');
  
  // Validar d√≠a y horario
  if (!activeDays.includes(clientDay)) {
    console.log('‚ùå Widget inactivo: D√≠a no permitido (' + clientDay + ') en zona horaria ' + clientTimeZone);
    return false;
  }

  if (currentTime >= startTime && currentTime <= endTime) {
    console.log('‚úÖ Widget activo: ' + clientTime + ' en ' + clientTimeZone);
    return true;
  } else {
    console.log('‚ùå Widget inactivo: Fuera de horario (' + clientTime + ' vs ' + startTime + '-' + endTime + ') en ' + clientTimeZone);
    return false;
  }
}
</script>

{% comment %} Solo mostrar si est√° habilitado Y si hay datos del formulario {% endcomment %}
{% if block.settings.enable_widget and phone_number != blank and message != blank %}

<script>
// Debug: Mostrar configuraci√≥n completa
console.log('=== WHATSAPP WIDGET CONFIGURACI√ìN ===', {
  phone: '{{ phone_number }}',
  message: '{{ message }}',
  buttonStyle: '{{ button_style }}',
  activeHours: '{{ active_hours }}',
  startTime: '{{ start_time }}',
  endTime: '{{ end_time }}',
  isActive24Hours: '{{ is_active_24_hours }}',
  activeDays: '{{ active_days }}'.split(','),
  timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
});

// Control de visibilidad inicial
document.addEventListener('DOMContentLoaded', function() {
  const widget = document.getElementById('whatsapp-widget-{{ block.id }}');
  
  function updateWidgetVisibility() {
    if (!isWidgetActiveNow()) {
      console.log('‚è∞ Widget ocultado: Fuera del horario de atenci√≥n');
      if (widget) {
        widget.style.display = 'none';
        
        // Mostrar mensaje fuera de horario (opcional)
        const closedMessage = document.createElement('div');
        closedMessage.id = 'whatsapp-closed-message';
        closedMessage.style.cssText = `
          position: fixed;
          {% case position %}
            {% when 'top-left' %} top: 20px; left: 20px;
            {% when 'top-right' %} top: 20px; right: 20px;
            {% when 'bottom-left' %} bottom: 20px; left: 20px;
            {% else %} bottom: 20px; right: 20px;
          {% endcase %}
          z-index: 9998;
          background: rgba(0,0,0,0.7);
          color: white;
          padding: 8px 12px;
          border-radius: 8px;
          font-size: 12px;
          font-family: sans-serif;
        `;
        closedMessage.innerHTML = `‚è≥ Horario: {{ start_time }} - {{ end_time }} ({{ active_days }})`;
        
        // Insertar cerca del widget
        if (widget.parentNode) {
          widget.parentNode.insertBefore(closedMessage, widget.nextSibling);
        }
      }
    } else {
      console.log('‚úÖ Widget visible: Dentro del horario de atenci√≥n');
      if (widget) {
        widget.style.display = 'flex';
        // Remover mensaje de fuera de horario si existe
        const existingMessage = document.getElementById('whatsapp-closed-message');
        if (existingMessage) existingMessage.remove();
      }
    }
  }

  // Verificar inmediatamente
  updateWidgetVisibility();
  
  // Verificar cada minuto
  setInterval(updateWidgetVisibility, 60000);
});
</script>

{% comment %} Definir estilos seg√∫n el tipo de bot√≥n seleccionado {% endcomment %}
{% case button_style %}
  {% when 'style1' %}
    {% assign widget_style = 'border-radius: 50%; width: 60px; height: 60px; padding: 0; justify-content: center;' %}
    {% assign widget_bg = button_color %}
  {% when 'style2' %}
    {% assign widget_style = 'border-radius: 50%; width: 60px; height: 60px; padding: 0; justify-content: center; border: 3px solid ' | append: button_color | append: '; background-color: white;' %}
    {% assign widget_bg = 'white' %}
  {% when 'style3' %}
    {% assign widget_style = 'border-radius: 50%; width: 60px; height: 60px; padding: 0; justify-content: center; border: 3px solid ' | append: button_color | append: '; background-color: white;' %}
    {% assign widget_bg = 'white' %}
  {% when 'style4' %}
    {% assign widget_style = 'border-radius: 16px; padding: 12px 16px; background-color: white; border: 2px solid ' | append: button_color | append: ';' %}
    {% assign widget_bg = 'white' %}
  {% when 'style5' %}
    {% assign widget_style = 'border-radius: 20px; padding: 12px 16px; background-color: white; border: 2px solid ' | append: button_color | append: ';' %}
    {% assign widget_bg = 'white' %}
  {% else %}
    {% assign widget_style = 'border-radius: 50px; padding: 15px 20px;' %}
    {% assign widget_bg = button_color %}
{% endcase %}

{% comment %} Widget de WhatsApp con CONTROL DE HORARIOS {% endcomment %}
<div id="whatsapp-widget-{{ block.id }}" style="
  position: fixed;
  {% case position %}
    {% when 'top-left' %} top: 20px; left: 20px;
    {% when 'top-right' %} top: 20px; right: 20px;
    {% when 'bottom-left' %} bottom: 20px; left: 20px;
    {% else %} bottom: 20px; right: 20px;
  {% endcase %}
  z-index: 9999;
  background-color: {{ widget_bg | default: button_color }};
  {{ widget_style }}
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: {{ block.settings.font_size | default: 14 }}px;
  color: {% if widget_bg == 'white' %}{{ button_color }}{% else %}white{% endif %};
  display: none; {# Inicialmente oculto hasta verificar horario #}
  align-items: center;
  gap: 10px;
  opacity: {{ block.settings.opacity | default: 100 | divided_by: 100.0 }};
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
" onclick="openWhatsApp{{ block.id }}()">

  {% comment %} Contenido del bot√≥n seg√∫n el estilo {% endcomment %}
  {% case button_style %}
    {% when 'style1', 'style2', 'style3' %}
      {% if logo_url != blank %}
        <img src="{{ logo_url }}" alt="WhatsApp" style="width: 32px; height: 32px; object-fit: contain;">
      {% else %}
        {# Iconos SVG para cada estilo #}
      {% endif %}
    {% when 'style4', 'style5' %}
      {% if logo_url != blank %}
        <img src="{{ logo_url }}" alt="WhatsApp" style="width: 20px; height: 20px; object-fit: contain;">
      {% else %}
        {# Iconos SVG para estilos de chat #}
      {% endif %}
      {% if block.settings.show_text %}
        <span style="font-weight: 600; font-size: 12px;">{{ block.settings.button_text | default: 'Chat' }}</span>
      {% endif %}
    {% else %}
      {% if logo_url != blank %}
        <img src="{{ logo_url }}" alt="WhatsApp" style="width: 24px; height: 24px; object-fit: contain;">
      {% else %}
        <span style="font-size: {{ block.settings.font_size | default: 14 | plus: 10 }}px;">{{ icon }}</span>
      {% endif %}
      {% if block.settings.show_text %}
        <span style="font-weight: bold;">{{ block.settings.button_text | default: 'WhatsApp' }}</span>
      {% endif %}
  {% endcase %}
</div>

<script>
function openWhatsApp{{ block.id }}() {
  if (!isWidgetActiveNow()) {
    console.log('‚ùå WhatsApp bloqueado: Fuera del horario de atenci√≥n');
    
    // Mostrar notificaci√≥n temporal
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      {% case position %}
        {% when 'top-left' %} top: 90px; left: 20px;
        {% when 'top-right' %} top: 90px; right: 20px;
        {% when 'bottom-left' %} bottom: 90px; left: 20px;
        {% else %} bottom: 90px; right: 20px;
      {% endcase %}
      z-index: 10000;
      background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
      color: white;
      padding: 12px 16px;
      border-radius: 12px;
      font-size: 14px;
      font-weight: 600;
      box-shadow: 0 8px 25px rgba(0,0,0,0.3);
      max-width: 250px;
      text-align: center;
    `;
    notification.innerHTML = `
      <div style="display: flex; align-items: center; gap: 8px;">
        <span>üïê</span>
        <div>
          <div style="font-size: 12px; opacity: 0.9;">Horario de atenci√≥n</div>
          <div style="font-size: 13px;">{{ start_time }} - {{ end_time }}</div>
          <div style="font-size: 11px; opacity: 0.7;">Zona horaria: ${Intl.DateTimeFormat().resolvedOptions().timeZone}</div>
        </div>
      </div>
    `;
    
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
    return;
  }
  
  // Abrir WhatsApp
  const url = `https://wa.me/{{ phone_number }}?text=${encodeURIComponent('{{ message | escape }}')}`;
  {% if block.settings.open_in_new_tab %}
    window.open(url, '_blank');
  {% else %}
    window.location.href = url;
  {% endif %}
}

// Hover effects
const widget{{ block.id }} = document.getElementById('whatsapp-widget-{{ block.id }}');
if (widget{{ block.id }}) {
  widget{{ block.id }}.addEventListener('mouseenter', function() {
    this.style.transform = 'scale({{ block.settings.hover_scale | default: 110 | divided_by: 100.0 }}) translateY(-2px)';
    this.style.boxShadow = '0 12px 35px rgba(0,0,0,0.25)';
  });
  widget{{ block.id }}.addEventListener('mouseleave', function() {
    this.style.transform = 'scale(1) translateY(0px)';
    this.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
  });
}
</script>

{% else %}

{% comment %} Mensaje de configuraci√≥n requerida {% endcomment %}
{% if request.design_mode %}
  <div style="
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: #fee2e2;
    border: 2px solid #fca5a5;
    border-radius: 12px;
    padding: 16px;
    max-width: 320px;
    font-family: system-ui, sans-serif;
    font-size: 14px;
    color: #991b1b;
    z-index: 9999;
  ">
    <strong>‚ö†Ô∏è WhatsApp Widget</strong><br>
    <span style="font-size: 12px;">
      Configura el widget desde la app antes de usarlo.
      {% unless phone_number %}<br>‚ùå Tel√©fono{% endunless %}
      {% unless message %}<br>‚ùå Mensaje{% endunless %}
    </span>
  </div>
{% endif %}

{% endif %}

{% schema %}
{
  "name": "WhatsApp Widget",
  "target": "body",
  "enabled_on": {
    "groups": ["app_embed"]
  },
  "settings": [
    {
      "type": "header",
      "content": "üì± Configuraci√≥n Principal"
    },
    {
      "type": "checkbox",
      "id": "enable_widget",
      "label": "Activar Widget",
      "default": true
    },
    {
      "type": "header",
      "content": "üé® Personalizaci√≥n"
    },
    {
      "type": "checkbox",
      "id": "show_text",
      "label": "Mostrar texto",
      "default": true
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Texto del bot√≥n",
      "default": "Chat"
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 10,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Tama√±o de fuente",
      "default": 14
    },
    {
      "type": "range",
      "id": "opacity",
      "min": 50,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Opacidad",
      "default": 100
    },
    {
      "type": "header",
      "content": "‚ú® Efectos"
    },
    {
      "type": "range",
      "id": "hover_scale",
      "min": 100,
      "max": 150,
      "step": 5,
      "unit": "%",
      "label": "Escala al hacer hover",
      "default": 110
    },
    {
      "type": "header",
      "content": "üîó Comportamiento"
    },
    {
      "type": "checkbox",
      "id": "open_in_new_tab",
      "label": "Abrir en nueva pesta√±a",
      "default": true
    }
  ]
}
{% endschema %}